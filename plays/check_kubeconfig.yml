---

# Check if KUBECONFIG is present

- name: "Read KUBECONFIG path from env vars"
  set_fact:
    kubeconfig_path: "{{ lookup('env','KUBECONFIG') }}"
  when: kubeconfig_path is not defined

- name: "Check if KUBECONFIG exists"
  stat:
    path: "{{ kubeconfig_path }}"
  register: kubeconfig

- name: "Fail if kubeconfig NOT found"
  fail:
    msg: "kubeconfig not found at {{ kubeconfig_path }}"
  when: not kubeconfig.stat.exists

# Install oc client when NOT present

- name: "Check if oc executable is present"
  command: "which oc"
  register: oc_result
  ignore_errors: true
  changed_when: oc_result.rc != 0

- name: "Configure oc_path from $PATH"
  set_fact:
    oc_tool_path: "{{ oc_result.stdout }}"
  when: oc_result.rc == 0

- block:

    - name: "Download oc client"
      get_url:
        url: "{{ oc_url }}"
        dest: "/tmp"

    - name: "Unarchive oc"
      unarchive:
        src: "/tmp/oc.tar.gz"
        dest: "/tmp"
        creates: "/tmp/oc"

    - name: "Copy oc to /usr/local/bin/"
      copy:
        src: "/tmp/oc"
        dest: "/usr/local/bin/"
        mode: u=rwx,g=rx,o=rx
      become: true

    - name: "Configure oc_path from Download"
      set_fact:
        oc_tool_path: "/usr/local/bin/oc"

  when: oc_result.rc != 0 and oc_url is defined

# get OCP version and set dci_topic

- name: Get oc version output
  command: "{{ oc_tool_path }} --kubeconfig {{ kubeconfig_path }} version"
  register: oc_version_str

- name: Get OCP version
  set_fact:
    ocp_version_full: "{{ item.split(':')[1].strip() }}"
    ocp_version: "{{ '.'.join(item.split(':')[1].strip().split('.')[0:2]) }}"
    ocp_version_maj: "{{ item.split(':')[1].strip().split('.')[0] }}"
    ocp_version_min: "{{ item.split(':')[1].strip().split('.')[1] }}"
    ocp_version_patch: "{{ item.split(':')[1].strip().split('.')[2] }}"
  when: "'Server Version' in item"
  loop: "{{ oc_version_str.stdout_lines }}"

- name: Fail if the ocp version is not set
  fail:
    msg: "OCP version is not set"
  when: not ocp_version

- name: "Set dci_topic"
  set_fact:
    dci_topic: "OCP-{{ ocp_version }}"

...
